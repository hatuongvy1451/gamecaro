import pygame
import sys
import subprocess

# Kh·ªüi t·∫°o pygame
pygame.init()
pygame.mixer.init()

# M√†u s·∫Øc
WHITE = (255, 255, 255)
BG_COLOR = (242, 242, 242)
BTN_COLOR = (0, 173, 181)
BTN_HOVER = (0, 163, 163)
TEXT_COLOR = (255, 255, 255)
TEXT_COLOR_1 = (0, 0, 0)

# K√≠ch th∆∞·ªõc m√†n h√¨nh
WIDTH, HEIGHT = 700, 500
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("üéÆ GAME C·ªú CARO - NH√ìM 11 üéÆ")

# Font
font_title_icon = pygame.font.SysFont("Segoe UI Emoji", 38)
font_title_text = pygame.font.SysFont("Tahoma", 28, bold=True)
font_text = pygame.font.SysFont("Tahoma", 22, bold=True)
font_text_1 = pygame.font.SysFont("Tahoma", 20)
font_footer = pygame.font.SysFont("Tahoma", 15)
font_icon = pygame.font.SysFont("Segoe UI Emoji", 32)

class Button:
    def __init__(self, x, y, icon, text, action=None, width=300, height=60, is_sound_on = True):
        self.x = x
        self.y = y
        self.icon = icon
        self.text = text
        self.action = action
        self.width = width
        self.height = height
        self.is_hovered = False  # ƒê·ªÉ l∆∞u tr·∫°ng th√°i c·ªßa n√∫t
        self.click_sound = pygame.mixer.Sound("sounds/click.wav")
        self.is_sound_on = is_sound_on

    def draw(self, surface, mouse_pos):
        rect = pygame.Rect(self.x, self.y, self.width, self.height)
        is_hovered = rect.collidepoint(mouse_pos)
        if is_hovered != self.is_hovered:  # Ki·ªÉm tra xem tr·∫°ng th√°i hover c√≥ thay ƒë·ªïi kh√¥ng
            self.is_hovered = is_hovered
            # Thay ƒë·ªïi con tr·ªè chu·ªôt ch·ªâ khi tr·∫°ng th√°i hover thay ƒë·ªïi
            if self.is_hovered:
                pygame.mouse.set_cursor(pygame.SYSTEM_CURSOR_HAND)  # ƒê·∫∑t con tr·ªè th√†nh h√¨nh b√†n tay
            else:
                pygame.mouse.set_cursor(pygame.SYSTEM_CURSOR_ARROW)  # ƒê·∫∑t l·∫°i con tr·ªè m·∫∑c ƒë·ªãnh

        # V·∫Ω n√∫t
        color = BTN_HOVER if self.is_hovered else BTN_COLOR
        pygame.draw.rect(surface, color, rect, border_radius=12)

        # V·∫Ω icon
        icon_render = font_icon.render(self.icon, True, TEXT_COLOR)
        surface.blit(icon_render, (self.x + 20, self.y + 15))

        # V·∫Ω text
        text_render = font_text.render(self.text, True, TEXT_COLOR)
        surface.blit(text_render, (self.x + 70, self.y + 18))

        return rect

    def handle_event(self, event, mouse_pos):
        rect = pygame.Rect(self.x, self.y, self.width, self.height)
        if rect.collidepoint(mouse_pos) and event.type == pygame.MOUSEBUTTONDOWN:
            if self.action:
                if self.is_sound_on:  # Ch·ªâ ph√°t √¢m thanh khi √¢m thanh ƒë∆∞·ª£c b·∫≠t
                    self.click_sound.play()
                self.action() 

# Bi·∫øn √¢m thanh
is_sound_on = sys.argv[1] == "True" if len(sys.argv) > 1 else True

# H√†m t·∫Øt/m·ªü √¢m thanh
def toggle_sound():
    global is_sound_on
    is_sound_on = not is_sound_on  # ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i √¢m thanh
    if is_sound_on:
        pygame.mixer.unpause()  # B·∫≠t √¢m thanh
    else:
        pygame.mixer.pause()  # T·∫Øt √¢m thanh

    # C·∫≠p nh·∫≠t l·∫°i n√∫t √¢m thanh
    update_sound_button()

    for btn in buttons:
        btn.is_sound_on = is_sound_on

    pygame.display.update()

# N√∫t "T·∫Øt/M·ªü √¢m thanh" 
sound_button = Button(WIDTH // 2 - 150, 470, "üîä" if is_sound_on else "üîá", "", toggle_sound, width=font_icon.size("üîä")[0] + 35)

# C·∫≠p nh·∫≠t n√∫t √¢m thanh
def update_sound_button():
    sound_button.icon = "üîä" if is_sound_on else "üîá"
    sound_button.text = ""  

# H√†nh ƒë·ªông cho c√°c n√∫t kh√°c
def play_with_computer():
    if not is_sound_on:  
        pygame.mixer.pause()
    else:
        pygame.mixer.Sound("sounds/click.wav").play()  
        pygame.time.wait(200)  
    subprocess.Popen(["python", "caro_bot.py", str(is_sound_on)])
    pygame.quit()
    sys.exit()

def play_with_friend():
    if not is_sound_on: 
        pygame.mixer.pause()
    else:
        pygame.mixer.Sound("sounds/click.wav").play() 
        pygame.time.wait(200)  
    subprocess.Popen(["python", "caro_2players.py", str(is_sound_on)])
    pygame.quit()
    sys.exit()

def show_guide():
    guide_running = True
    while guide_running:
        screen.fill(BG_COLOR)
        mouse_pos = pygame.mouse.get_pos()

        # V·∫Ω ti√™u ƒë·ªÅ
        title_icon_left = font_title_icon.render("üìò", True, BTN_COLOR)
        title_text = font_title_text.render("H∆∞·ªõng d·∫´n ch∆°i", True, BTN_COLOR)

        total_width = title_icon_left.get_width() + title_text.get_width()
        x_start = WIDTH // 2 - total_width // 2
        screen.blit(title_icon_left, (x_start, 50))
        screen.blit(title_text, (x_start + title_icon_left.get_width(), 50))

        # T√°ch icon v√† text trong instructions
        instructions = [
            ("üìç", "Ng∆∞·ªùi ch∆°i l·∫ßn l∆∞·ª£t ƒë√°nh X ho·∫∑c O v√†o √¥ tr·ªëng."),
            ("üéØ", "Ng∆∞·ªùi n√†o c√≥ 5 k√Ω hi·ªáu li·ªÅn k·ªÅ nhau (theo h√†ng ngang,"),
            ("  ", "h√†ng d·ªçc ho·∫∑c ch√©o) l√† ng∆∞·ªùi chi·∫øn th·∫Øng."),
            ("ü§ñ", "Ch·∫ø ƒë·ªô 'Ch∆°i v·ªõi m√°y' s·ª≠ d·ª•ng thu·∫≠t to√°n c∆° b·∫£n."),
            ("üë¨", "Ch·∫ø ƒë·ªô 'Ch∆°i v·ªõi b·∫°n' d√†nh cho 2 ng∆∞·ªùi ch∆°i c√πng m√°y."),
            ("üí°", "Ch√∫c b·∫°n ch∆°i game vui v·∫ª!")
        ]
        
        y_offset = 130  
        margin_left = 95  
        for icon, text in instructions:
            icon_render = font_icon.render(icon, True, TEXT_COLOR_1)
            text_render = font_text_1.render(text, True, TEXT_COLOR_1)
            
            screen.blit(icon_render, (margin_left, y_offset))
            screen.blit(text_render, (margin_left + icon_render.get_width() + 10, y_offset))
            y_offset += 40

        # N√∫t "ƒê√£ hi·ªÉu"
        button_width = 200
        button_x = (WIDTH - button_width) // 2
        understand_button = Button(button_x, HEIGHT - 100, "üëç", "ƒê√£ hi·ªÉu", show_main_menu, is_sound_on=is_sound_on, width=200)
        understand_button.draw(screen, mouse_pos)

        # S·ª± ki·ªán
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.mixer.Sound("sounds/click.wav").play() 
                guide_running = False

            understand_button.handle_event(event, mouse_pos)

        pygame.display.flip()

def show_main_menu():
    running = True 
    while running:
        screen.fill(BG_COLOR)
        mouse_pos = pygame.mouse.get_pos()

        # V·∫Ω ti√™u ƒë·ªÅ: icon - text - icon
        title_icon_left = font_title_icon.render("‚ú®üéÆ", True, BTN_COLOR)
        title_text = font_title_text.render(" GAME C·ªú CARO ", True, BTN_COLOR)
        title_icon_right = font_title_icon.render("üéÆ‚ú®", True, BTN_COLOR)

        total_width = title_icon_left.get_width() + title_text.get_width() + title_icon_right.get_width()
        x_start = WIDTH // 2 - total_width // 2
        screen.blit(title_icon_left, (x_start, 50))
        screen.blit(title_text, (x_start + title_icon_left.get_width(), 50))
        screen.blit(title_icon_right, (x_start + title_icon_left.get_width() + title_text.get_width(), 50))

        sound_button.x = x_start + total_width + 20 
        sound_button.y = 50  
        sound_button.draw(screen, mouse_pos)

        button_y_start = 150  # ƒêi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa c√°c n√∫t
        button_gap = 80  # Kho·∫£ng c√°ch gi·ªØa c√°c n√∫t

        # V·∫Ω c√°c n√∫t trong menu
        for index, btn in enumerate(buttons):
            button_y = button_y_start + index * button_gap
            btn.y = button_y  # C·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ y cho n√∫t
            btn.draw(screen, mouse_pos)

        # Footer (canh l·ªÅ ·ªü d∆∞·ªõi)
        version = font_footer.render("Phi√™n b·∫£n nh√≥m 11 - 2025", True, (51, 51, 51))
        screen.blit(version, (WIDTH // 2 - version.get_width() // 2, HEIGHT - 30))

        # S·ª± ki·ªán
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                if not is_sound_on:  
                    pygame.mixer.pause()
                else:
                    pygame.mixer.Sound("sounds/click.wav").play()  
                    pygame.time.wait(200)
                pygame.quit()
                sys.exit()

            for btn in buttons:
                btn.handle_event(event, mouse_pos)
            
            sound_button.handle_event(event, mouse_pos)

        pygame.display.flip()

def exit_game():
    if not is_sound_on:  
        pygame.mixer.pause()
    else:
        pygame.mixer.Sound("sounds/click.wav").play()
        pygame.time.wait(200)  
    pygame.quit()
    sys.exit()

# T·∫°o n√∫t
buttons = [
    Button(WIDTH // 2 - 150, 150, "ü§ñ", "Ch∆°i v·ªõi m√°y", play_with_computer, is_sound_on=is_sound_on),
    Button(WIDTH // 2 - 150, 230, "üë¨", "Ch∆°i v·ªõi b·∫°n", play_with_friend, is_sound_on=is_sound_on),
    Button(WIDTH // 2 - 150, 310, "üìò", "H∆∞·ªõng d·∫´n ch∆°i", show_guide, is_sound_on=is_sound_on),
    Button(WIDTH // 2 - 150, 390, "‚ùå", "Tho√°t game", exit_game, is_sound_on=is_sound_on),
]

# Hi·ªÉn th·ªã menu ch√≠nh
show_main_menu()
